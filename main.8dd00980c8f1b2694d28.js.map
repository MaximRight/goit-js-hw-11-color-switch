{"version":3,"sources":["webpack:///./js/color-switcher.js","webpack:///./js/countdown-timer.js"],"names":["colors","refs","startBtn","document","querySelector","stopBtn","resetBtn","bodyRef","body","colorSwitcher","intervalId","start","disabled","this","setInterval","min","max","integer","Number","length","Math","floor","random","style","backgroundColor","stop","clearInterval","addEventListener","bind","valueDays","valueHours","valueMins","valueSecs","btnTimer","alertMessage","isActive","targetDate","Date","now","currentTime","timer","color","fontSize","updateClockface","time","days","hours","mins","secs","textContent","renderClockface","pad","value","String","padStart","target","current","deltaTime"],"mappings":"0HAAMA,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,WAIIC,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,SAAUH,SAASC,cAAc,6BACjCG,QAASJ,SAASK,MAOdC,EAAgB,CACpBC,WAAY,KAIZC,MALoB,WAMlBV,EAAKC,SAASU,UAAW,EAQzBC,KAAKH,WAAaI,aAAY,WAC5B,IAnB6BC,EAAKC,EAmB9BC,GAnByBF,EAmBW,EAnBNC,EAmBSE,OAAOlB,EAAOmB,QAlBtDC,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,GAAKA,IAmBhDd,EAAKM,QAAQgB,MAAMC,gBAAkBxB,EAAOiB,KAC3C,MAELQ,KAnBoB,WAoBlBxB,EAAKC,SAASU,UAAW,EACzBc,cAAcb,KAAKH,YACnBG,KAAKH,WAAa,OAOtBT,EAAKC,SAASyB,iBACZ,QACAlB,EAAcE,MAAMiB,KAAKnB,IAE3BR,EAAKI,QAAQsB,iBAAiB,QAASlB,EAAcgB,KAAKG,KAAKnB,IAC/DR,EAAKK,SAASqB,iBACZ,SACA,kBAAO1B,EAAKM,QAAQgB,MAAMC,gBAAkB,gB,cCzDxCvB,EAAO,CACX4B,UAAW1B,SAASC,cAAc,6BAClC0B,WAAY3B,SAASC,cAAc,8BACnC2B,UAAW5B,SAASC,cAAc,6BAClC4B,UAAW7B,SAASC,cAAc,6BAClC6B,SAAU9B,SAASC,cAAc,8BACjC8B,aAAc/B,SAASC,cAAc,cAGvCH,EAAKgC,SAASN,iBAAiB,SAqC/B,WACE,GAAIQ,EAAU,CACZT,cAAchB,GACdA,EAAa,KACb,IAAM0B,EAAaC,KAAKC,MAAQ,IAMhC,OALA5B,EAAaI,aAAY,WACvB,IAAMyB,EAAcF,KAAKC,MACzBE,EAAMJ,EAAYG,KACjB,UACHJ,GAAW,GAIb,IAAKA,EAAU,CACbT,cAAchB,GACdyB,GAAW,EACXzB,EAAa,KACb,IAAM0B,EAAa,IAAIC,KAAK,yBAC5B3B,EAAaI,aAAY,WACvB,IAAMyB,EAAcF,KAAKC,MACzBE,EAAMJ,EAAYG,KAGjB,SA1DPtC,EAAKiC,aAAaX,MAAMkB,MAAQ,MAChCxC,EAAKiC,aAAaX,MAAMmB,SAAW,OAEnC,IAAIP,GAAW,EACTC,EAAaC,KAAKC,MAAQ,IAC5B5B,EAAaI,aAAY,WAC7B,IAAMyB,EAAcF,KAAKC,MACzBE,EAAMJ,EAAYG,KACf,KAGH,SAASI,EAAgBC,IAWzB,SAAyBC,EAAMC,EAAOC,EAAMC,GAC1C/C,EAAK4B,UAAUoB,YAAf,GAAgCJ,EAChC5C,EAAK6B,WAAWmB,YAAhB,GAAiCH,EACjC7C,EAAK8B,UAAUkB,YAAf,GAAgCF,EAChC9C,EAAK+B,UAAUiB,YAAf,GAAgCD,EAPlCE,CAPeC,EAAI/B,KAAKC,MAAMuB,EAAO,QACrBO,EACZ/B,KAAKC,MAAOuB,EAAO,MAAR,OAEAO,EAAI/B,KAAKC,MAAOuB,EAAO,KAAR,MACfO,EAAI/B,KAAKC,MAAOuB,EAAO,IAAe,OAYrD,SAASO,EAAIC,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,KAgCnC,SAASd,EAAMe,EAAQC,GACrB,IAAMC,EAAYF,EAASC,EAC3B,GAAIA,GAAWD,EAIb,OAHA7B,cAAchB,GACdiC,EAAgB,QAChB1C,EAAKiC,aAAae,YAAlB,oFAGFN,EAAgBc,K","file":"main.8dd00980c8f1b2694d28.js","sourcesContent":["const colors = [\n  '#FFFFFF',\n  '#2196F3',\n  '#4CAF50',\n  '#FF9800',\n  '#009688',\n  '#795548',\n];\n\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  resetBtn: document.querySelector('button[data-action-reset]'),\n  bodyRef: document.body,\n};\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst colorSwitcher = {\n  intervalId: null,\n\n  // we may use either isActive or refs.startBtn.disabled = true;\n  // isActive: false,\n  start() {\n    refs.startBtn.disabled = true;\n\n    // we may use either isActive or refs.startBtn.disabled = true;\n    // if (this.isActive) {\n    //   return;\n    // }\n    // this.isActive = true;\n\n    this.intervalId = setInterval(() => {\n      let integer = randomIntegerFromInterval(0, Number(colors.length));\n      refs.bodyRef.style.backgroundColor = colors[integer];\n    }, 1000);\n  },\n  stop() {\n    refs.startBtn.disabled = false;\n    clearInterval(this.intervalId);\n    this.intervalId = null;\n\n    // we may use either isActive or refs.startBtn.disabled = true;\n    // this.isActive = false;\n  },\n};\n\nrefs.startBtn.addEventListener(\n  'click',\n  colorSwitcher.start.bind(colorSwitcher),\n);\nrefs.stopBtn.addEventListener('click', colorSwitcher.stop.bind(colorSwitcher));\nrefs.resetBtn.addEventListener(\n  'click',\n  () => (refs.bodyRef.style.backgroundColor = 'whitesmoke'),\n);\n","const refs = {\n  valueDays: document.querySelector('.value[data-value=\"days\"]'),\n  valueHours: document.querySelector('.value[data-value=\"hours\"]'),\n  valueMins: document.querySelector('.value[data-value=\"mins\"]'),\n  valueSecs: document.querySelector('.value[data-value=\"secs\"]'),\n  btnTimer: document.querySelector('button[data-action-change]'),\n  alertMessage: document.querySelector('.js-alert'),\n};\n\nrefs.btnTimer.addEventListener('click', onBtnClickHandler);\n\nrefs.alertMessage.style.color = 'red';\nrefs.alertMessage.style.fontSize = '30px';\n\nlet isActive = false;\nconst targetDate = Date.now() + 30000;\nlet intervalId = setInterval(() => {\nconst currentTime = Date.now();\ntimer(targetDate, currentTime)\n}, 1000);\n\n\nfunction updateClockface(time) {\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n  const hours = pad(\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n  );\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\nrenderClockface(days, hours, mins, secs)\n}\n\nfunction renderClockface(days, hours, mins, secs) {\n  refs.valueDays.textContent = `${days}`;\n  refs.valueHours.textContent = `${hours}`;\n  refs.valueMins.textContent = `${mins}`;\n  refs.valueSecs.textContent = `${secs}`;\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\n\n\nfunction onBtnClickHandler() {\n  if (isActive) {\n    clearInterval(intervalId);\n    intervalId = null;\n    const targetDate = Date.now() + 30000;\n    intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      timer(targetDate, currentTime)\n    }, 1000);\n    isActive = false;\n    return;\n  }\n\n  if (!isActive) {\n    clearInterval(intervalId);\n    isActive = true;\n    intervalId = null;\n    const targetDate = new Date('Jan 30, 2022 21:08:50');\n    intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      timer(targetDate, currentTime)\n\n      \n    }, 1000);\n  }\n}\n\nfunction timer(target, current) {\n  const deltaTime = target - current;\n  if (current >= target) {\n    clearInterval(intervalId);\n    updateClockface(0);\n    refs.alertMessage.textContent = `По истечении таймера можно вставить модалку или любой popup с рекламой и прочим.`;\n    return;\n  }\n  updateClockface(deltaTime);\n  \n}\n\n"],"sourceRoot":""}